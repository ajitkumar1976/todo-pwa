{"version":3,"sources":["constants/action-types.js","components/AddTodo.js","actions/index.js","components/Todo.js","constants/filters.js","components/Filter.js","components/TodoList.js","components/App.js","reducers/todos.js","reducers/filter.js","reducers/index.js","registerServiceWorker.js","index.js"],"names":["ADD_TODO","CLEAR_TODOS","SET_FILTER","TOGGLE_TODO","connect","dispatch","onSubmit","todo","type","payload","input","e","preventDefault","id","uuidv1","value","trim","text","completed","className","placeholder","ref","node","Item","styled","li","onItemClick","toggleTodo","onClick","style","textDecoration","FILTER_ALL","FILTER_COMPLETED","FILTER_ACTIVE","Dropdown","div","onChangeFilter","filter","target","onClickClear","todosLength","display","onChange","filteredTodos","todos","List","ul","state","message","length","map","Container","Paper","App","Component","storedTodos","JSON","parse","localStorage","getItem","action","setItem","stringify","removeItem","modifiedTodos","Object","assign","storedFilter","combineReducers","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","store","createStore","rootReducer","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.8483689b.chunk.js","sourcesContent":["// Using constants instead of strings used directly prevents errors due to typos etc\n\nexport const ADD_TODO = 'ADD_TODO';\nexport const CLEAR_TODOS = 'CLEAR_TODOS';\nexport const SET_FILTER = 'SET_FILTER';\nexport const TOGGLE_TODO = 'TOGGLE_TODO';","import React from 'react';\nimport { connect } from 'react-redux';\n\n// UUID is a library for generating a unique id\nimport uuidv1 from \"uuid\";\n\nimport { addTodo } from '../actions';\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onSubmit: (todo) => dispatch(addTodo(todo))\n    }\n}\n\n// Form component for adding new todo, dispatches addTodo with a todo object\nconst AddTodo = ({onSubmit}) => {\n    let input;\n\n    return (\n        <div>\n            <form \n                onSubmit={e => { \n                        e.preventDefault();\n                        const id = uuidv1();\n                        if(input.value.trim()) {\n                            onSubmit({\n                                id,\n                                text: input.value,\n                                completed: false\n                            });\n                            input.value = '';\n                        } \n                    }}\n                className=\"row\"\n            >\n                <div className=\"col padding-right-small\">\n                    <input type=\"text\" placeholder=\"New Todo\" ref={node => { input = node }} />\n                </div>\n                <div className=\"col padding-left-small\">\n                    <input type=\"submit\" value=\"Add\" className=\"paper-btn btn-small\" />\n                </div>\n            </form>\n        </div>\n    )\n}\n\nexport default connect(null, mapDispatchToProps)(AddTodo);","// Action creators recieve data from the DOM event, format it as formal JSON 'action' object\n\nimport { ADD_TODO, SET_FILTER, TOGGLE_TODO, CLEAR_TODOS } from '../constants/action-types';\n\nexport const addTodo = (payload) => ({\n    type: ADD_TODO,\n    payload\n});\n\nexport const clearTodos = () => ({\n    type: CLEAR_TODOS\n});\n\nexport const setFilter = (filter) => ({\n    type: SET_FILTER,\n    filter\n});\n\nexport const toggleTodo = (id) => ({\n    type: TOGGLE_TODO,\n    id\n});","import React from 'react';\nimport { connect } from 'react-redux';\nimport styled from 'styled-components';\n\nimport { toggleTodo } from '../actions';\n\n// Toggle todo completed state\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onItemClick: (id) => dispatch(toggleTodo(id))\n    }\n}\n\nconst Item = styled.li`\n    padding-left: 1em;\n    cursor: pointer;\n    overflow-wrap: break-word;\n    &:before {\n        content: \"\"\n    }\n`;\n\n// Individual Todo component, depending on state of completion, styles are applied\nconst Todo = ({id, text, completed, onItemClick}) => {\n    return (\n        <Item \n            className={\"padding-small margin-small \" + (completed ? 'background-primary' : 'shadow shadow-hover')}\n            key={id}\n            onClick={e => onItemClick(id)}\n            style={completed ? {textDecoration: 'line-through'} : {}}\n        >\n            {text}\n        </Item>\n    )\n}\n\nexport default connect(null, mapDispatchToProps)(Todo);","// Constants for filter types\n\nexport const FILTER_ALL = 'FILTER_ALL';\nexport const FILTER_COMPLETED = 'FILTER_COMPLETED';\nexport const FILTER_ACTIVE = 'FILTER_ACTIVE';","import React from 'react';\nimport { connect } from 'react-redux';\nimport styled from 'styled-components';\n\nimport { setFilter, clearTodos } from '../actions';\nimport { FILTER_COMPLETED, FILTER_ALL, FILTER_ACTIVE } from '../constants/filters';\n\n// Change filter state\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onChangeFilter: (e) => dispatch(setFilter(e.target.value)),\n        onClickClear: (e) => dispatch(clearTodos())\n    }\n}\n\nconst Dropdown = styled.div`\n    margin: 3em 0 0 0;\n`;\n\n// Component to change between filters and also clear from localStorage\nconst Filter = ({todosLength, filter, onChangeFilter, onClickClear}) => {\n    return (\n        <Dropdown className=\"row flex-edges\">\n            <div className=\"col padding-small\">\n                <button className=\"btn-small\" style={todosLength ? {} : {display: 'none'}} onClick={onClickClear}>Clear</button>\n            </div>\n            <div className=\"col padding-small\">\n                <div className=\"row flex-right margin-none\">\n                    <span className=\"padding-right-small\">Show:</span>\n                    <select onChange={onChangeFilter} value={filter}>\n                        <option value={FILTER_ALL}>All</option>\n                        <option value={FILTER_ACTIVE}>Active</option>\n                        <option value={FILTER_COMPLETED}>Completed</option>\n                    </select>\n                </div>                \n            </div>            \n        </Dropdown>        \n    );\n}\n\nexport default connect(null, mapDispatchToProps)(Filter);\n\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport styled from 'styled-components';\n\nimport Todo from './Todo';\nimport Filter from './Filter';\nimport { FILTER_ALL, FILTER_COMPLETED, FILTER_ACTIVE } from '../constants/filters';\n\n// Filter todos based on selected filter\nconst filteredTodos = (todos, filter) => {\n    switch(filter) {\n        case FILTER_ALL:\n            return todos;\n        case FILTER_COMPLETED:\n            return todos.filter(todo => todo.completed);\n        case FILTER_ACTIVE:\n            return todos.filter(todo => !todo.completed);\n        default:\n            return todos;\n    }\n}\n\n// Get todos from state\nconst mapStateToProps = (state) => {\n    return {\n        todos: filteredTodos(state.todos, state.filter),\n        filter: state.filter\n    }\n}\n\n\n\nconst List = styled.ul`\n    padding-left: 0\n`;\n\n// Component to display todolist, also wraps Filter component\nconst TodoList = ({todos, filter}) => {\n    \n    // Display message if no todos\n    let message;\n    if(todos.length === 0) {\n        let text;\n        switch(filter) {\n            case FILTER_COMPLETED: text = 'Nothing completed yet.'; break;\n            case FILTER_ACTIVE: text = 'Nothing to be completed.'; break;\n            default: text = 'Chill scenes.'; break;\n        }\n        message = (<div className=\"row flex-center margin-top-large\">{text}</div>);\n    }       \n\n    return (\n        <div>\n            {message}\n            <List className=\"child-borders\">\n                {todos.map(todo =>\n                    <Todo\n                        className=\"row\"\n                        key={todo.id}\n                        {...todo}\n                    />\n                )}\n            </List>\n            <Filter todosLength={todos.length} filter={filter}/>\n        </div>        \n    );\n}\n\nexport default connect(mapStateToProps)(TodoList);","import React, { Component } from 'react';\nimport styled from 'styled-components';\n\nimport AddTodo from './AddTodo';\nimport TodoList from './TodoList';\n\nconst Container = styled.div`\n  background-color: #f1f1f1;\n  margin: 0;\n  min-height: 100vh;\n`;\n\nconst Paper = styled.div`\n  width: 480px !important;\n  background-color: white;\n`;\n\n// Main app structure\nclass App extends Component {\n  render() {\n    return (\n      <Container className=\"row flex-center flex-middle\">\n        <Paper className=\"border border-primary padding-large margin-large no-responsive\">\n          <h3 className=\"margin-small\">Todo List of Ajit Nayak</h3>\n          <AddTodo />\n          <TodoList />\n        </Paper>\n      </Container>      \n    );\n  }\n}\n\nexport default App;\n","import { ADD_TODO, TOGGLE_TODO, CLEAR_TODOS } from '../constants/action-types';\n\n// Check localStorage for saved Todos, else return null array\nconst storedTodos = JSON.parse(localStorage.getItem('todos')) || [];\n\n// Each action as a switch case, to perform different actions to state\nconst todos = (state = storedTodos, action) => {\n    switch (action.type) {\n        case ADD_TODO:\n            localStorage.setItem('todos', JSON.stringify([...state, action.payload]));\n            return [...state, action.payload];\n        \n        case CLEAR_TODOS:\n            localStorage.removeItem('todos');\n            return [];\n\n        case TOGGLE_TODO:\n            let modifiedTodos = state.map(todo => {\n                        if (todo.id === action.id) \n                            return Object.assign({}, todo, { completed: !todo.completed });                    \n                        return todo;\n                    }\n                );\n            localStorage.setItem('todos', JSON.stringify(modifiedTodos));\n            return modifiedTodos;\n\n        default:\n            return state;\n    }\n}\n\nexport default todos;","// Check localStorage for saved filter state, else init with FILTER_ALL\n\nimport { SET_FILTER } from '../constants/action-types';\nimport { FILTER_ALL } from '../constants/filters';\n\nconst storedFilter = localStorage.getItem('filter') || FILTER_ALL;\n\nconst filter = (state = storedFilter, action) => {\n    switch(action.type) {\n        case SET_FILTER:\n            localStorage.setItem('filter', action.filter);\n            return action.filter;\n        default:\n            return state;\n    }\n}\n\nexport default filter;","// Reducer functions take state from Redux and action objects and returns a new state\n// Here, store has values of states of both todos and filter\n\nimport { combineReducers } from 'redux';\nimport todos from './todos';\nimport filter from './filter';\n\nexport default combineReducers({\n    todos,\n    filter\n});","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport 'papercss/dist/paper.min.css';\n\nimport App from './components/App';\nimport rootReducer from './reducers';\nimport registerServiceWorker from './registerServiceWorker';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n);\nregisterServiceWorker();\n"],"sourceRoot":""}